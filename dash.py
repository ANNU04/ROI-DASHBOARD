# -*- coding: utf-8 -*-
"""dash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mq2XgZzz7s7w1f3thYtD-141E_xjrMkd
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import base64

# Load CSVs
@st.cache_data
def load_data():
    influencers_df = pd.read_csv("C:\\Users\\ASUS\\Desktop\\Health\\influencers.csv")
    posts_df = pd.read_csv("C:\\Users\\ASUS\\Desktop\\Health\\posts.csv")
    tracking_df = pd.read_csv("C:\\Users\\ASUS\\Desktop\\Health\\tracking_data.csv")
    payouts_df = pd.read_csv("C:\\Users\\ASUS\\Desktop\\Health\\payouts.csv")

    # Lowercase and clean column names
    influencers_df.columns = influencers_df.columns.str.strip().str.lower()
    posts_df.columns = posts_df.columns.str.strip().str.lower()
    tracking_df.columns = tracking_df.columns.str.strip().str.lower()
    payouts_df.columns = payouts_df.columns.str.strip().str.lower()

    return influencers_df, posts_df, tracking_df, payouts_df

# Load data
influencers_df, posts_df, tracking_df, payouts_df = load_data()

# Rename 'id' to 'influencer_id' in influencers_df if it exists
if 'id' in influencers_df.columns:
    influencers_df.rename(columns={'id': 'influencer_id'}, inplace=True)


# Ensure the join column exists
if 'influencer_id' not in tracking_df.columns or 'influencer_id' not in influencers_df.columns:
    st.error("Missing 'influencer_id' in tracking or influencers CSV. Please check your files.")
    st.stop()

# Merge tracking + influencers
merged_df = tracking_df.merge(influencers_df, on="influencer_id", how="left")

# Title
st.title("ðŸ“Š Influencer Campaign ROI Dashboard")

# Function to convert local image to base64 string
def get_base64_of_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded = base64.b64encode(image_file.read()).decode()
    return encoded

# Load your background image
bg_image = get_base64_of_image("ROI.AVIF")

# Inject custom CSS with the background image
st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{bg_image}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# Filters
platforms = st.multiselect("Select Platforms", influencers_df['platform'].dropna().unique(), default=None)
products = st.multiselect("Select Products", tracking_df['product'].dropna().unique(), default=None)
categories = st.multiselect("Select Influencer Categories", influencers_df['category'].dropna().unique(), default=None)

# Apply filters
if platforms:
    merged_df = merged_df[merged_df['platform'].isin(platforms)]
if products:
    merged_df = merged_df[merged_df['product'].isin(products)]
if categories:
    merged_df = merged_df[merged_df['category'].isin(categories)]

# KPI Section
total_revenue = merged_df['revenue'].sum()
# Ensure total_orders is calculated from the filtered merged_df
total_orders = merged_df['orders'].sum()
# Merge payouts with influencers to get the name for calculating total_spend
payouts_with_names = payouts_df.merge(influencers_df[['influencer_id', 'name']], on='influencer_id', how='left')
total_spend = payouts_with_names['total_payout'].sum() if 'total_payout' in payouts_with_names.columns else 0
roi = round(total_revenue / total_spend, 2) if total_spend else 0

col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Revenue", f"â‚¹{total_revenue:,.0f}")
col2.metric("Total Orders", f"{total_orders:,}")
col3.metric("Total Payout", f"â‚¹{total_spend:,.0f}")
col4.metric("ROI", f"{roi}x")

# Charts
st.subheader("ðŸ“ˆ Revenue by Influencer")
revenue_by_influencer = merged_df.groupby("name")["revenue"].sum().sort_values(ascending=False).reset_index()
fig1 = px.bar(revenue_by_influencer.head(10), x="name", y="revenue", title="Top Influencers by Revenue")
st.plotly_chart(fig1)

# ROI Table
st.subheader("ðŸ“‰ Poor ROI Influencers")
# Merge payouts with influencers to get the name for ROI calculation
roi_df = merged_df.groupby("name").agg({'revenue': 'sum'}).reset_index()
roi_df = roi_df.merge(payouts_with_names[['name', 'total_payout']], on='name', how='left')
# Handle potential division by zero and missing payout data
roi_df['roi'] = roi_df.apply(lambda row: row['revenue'] / row['total_payout'] if row['total_payout'] and row['total_payout'] > 0 else 0, axis=1)
poor_roi = roi_df.sort_values('roi').head(10)
st.dataframe(poor_roi[['name', 'revenue', 'total_payout', 'roi']])


# Export
st.subheader("ðŸ“¤ Export Filtered Data")
csv = merged_df.to_csv(index=False).encode('utf-8')
st.download_button("Download Filtered CSV", data=csv, file_name="filtered_campaign_data.csv", mime='text/csv')

# Footer
st.markdown("---")
st.caption("Built for HealthKart â€¢ Influencer Campaign ROI Tracking")

